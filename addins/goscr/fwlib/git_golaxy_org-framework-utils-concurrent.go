// Code generated by 'yaegi extract git.golaxy.org/framework/utils/concurrent'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/framework/utils/concurrent"
	"go/constant"
	"go/token"
	"reflect"
	"time"
)

func init() {
	Symbols["git.golaxy.org/framework/utils/concurrent/concurrent"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CacheDefaultCleanInterval":  reflect.ValueOf(concurrent.CacheDefaultCleanInterval),
		"CacheDefaultCleanNum":       reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"ErrFutureCanceled":          reflect.ValueOf(&concurrent.ErrFutureCanceled).Elem(),
		"ErrFutureNotFound":          reflect.ValueOf(&concurrent.ErrFutureNotFound).Elem(),
		"ErrFutureRespIncorrectType": reflect.ValueOf(&concurrent.ErrFutureRespIncorrectType).Elem(),
		"ErrFutureTimeout":           reflect.ValueOf(&concurrent.ErrFutureTimeout).Elem(),
		"ErrFuturesClosed":           reflect.ValueOf(&concurrent.ErrFuturesClosed).Elem(),
		"MakeFutureRespAsyncRet":     reflect.ValueOf(concurrent.MakeFutureRespAsyncRet),
		"MakeRespAsyncRet":           reflect.ValueOf(concurrent.MakeRespAsyncRet),
		"NewDeduplicator":            reflect.ValueOf(concurrent.NewDeduplicator),
		"NewFutures":                 reflect.ValueOf(concurrent.NewFutures),

		// type definitions
		"Deduplicator":   reflect.ValueOf((*concurrent.Deduplicator)(nil)),
		"Future":         reflect.ValueOf((*concurrent.Future)(nil)),
		"Futures":        reflect.ValueOf((*concurrent.Futures)(nil)),
		"IWatcher":       reflect.ValueOf((*concurrent.IWatcher)(nil)),
		"RequestHandler": reflect.ValueOf((*concurrent.RequestHandler)(nil)),
		"Resp":           reflect.ValueOf((*concurrent.Resp)(nil)),
		"RespAsyncRet":   reflect.ValueOf((*concurrent.RespAsyncRet)(nil)),

		// interface wrapper definitions
		"_IWatcher": reflect.ValueOf((*_git_golaxy_org_framework_utils_concurrent_IWatcher)(nil)),
		"_Resp":     reflect.ValueOf((*_git_golaxy_org_framework_utils_concurrent_Resp)(nil)),
	}
}

// _git_golaxy_org_framework_utils_concurrent_IWatcher is an interface wrapper for IWatcher type
type _git_golaxy_org_framework_utils_concurrent_IWatcher struct {
	IValue      interface{}
	WDeadline   func() (deadline time.Time, ok bool)
	WDone       func() <-chan struct{}
	WErr        func() error
	WTerminate  func() async.AsyncRet
	WTerminated func() async.AsyncRet
	WValue      func(key any) any
}

func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Done() <-chan struct{} { return W.WDone() }
func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Err() error            { return W.WErr() }
func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Terminate() async.AsyncRet {
	return W.WTerminate()
}
func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Terminated() async.AsyncRet {
	return W.WTerminated()
}
func (W _git_golaxy_org_framework_utils_concurrent_IWatcher) Value(key any) any { return W.WValue(key) }

// _git_golaxy_org_framework_utils_concurrent_Resp is an interface wrapper for Resp type
type _git_golaxy_org_framework_utils_concurrent_Resp struct {
	IValue interface{}
	WPush  func(ret async.Ret) error
}

func (W _git_golaxy_org_framework_utils_concurrent_Resp) Push(ret async.Ret) error {
	return W.WPush(ret)
}
