// Code generated by 'yaegi extract git.golaxy.org/framework/addins/broker'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/core/utils/option"
	"git.golaxy.org/framework/addins/broker"
	"reflect"
	"time"
)

func init() {
	Symbols["git.golaxy.org/framework/addins/broker/broker"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AtLeastOnce":     reflect.ValueOf(broker.AtLeastOnce),
		"AtMostOnce":      reflect.ValueOf(broker.AtMostOnce),
		"EffectivelyOnce": reflect.ValueOf(broker.EffectivelyOnce),
		"ExactlyOnce":     reflect.ValueOf(broker.ExactlyOnce),
		"MakeReadChan":    reflect.ValueOf(broker.MakeReadChan),
		"MakeWriteChan":   reflect.ValueOf(broker.MakeWriteChan),
		"Name":            reflect.ValueOf(&broker.Name).Elem(),
		"Using":           reflect.ValueOf(&broker.Using).Elem(),
		"With":            reflect.ValueOf(&broker.With).Elem(),

		// type definitions
		"DeliveryReliability": reflect.ValueOf((*broker.DeliveryReliability)(nil)),
		"ErrorHandler":        reflect.ValueOf((*broker.ErrorHandler)(nil)),
		"Event":               reflect.ValueOf((*broker.Event)(nil)),
		"EventHandler":        reflect.ValueOf((*broker.EventHandler)(nil)),
		"IBroker":             reflect.ValueOf((*broker.IBroker)(nil)),
		"ISubscriber":         reflect.ValueOf((*broker.ISubscriber)(nil)),
		"SubscriberOptions":   reflect.ValueOf((*broker.SubscriberOptions)(nil)),
		"UnsubscribedCB":      reflect.ValueOf((*broker.UnsubscribedCB)(nil)),

		// interface wrapper definitions
		"_IBroker":     reflect.ValueOf((*_git_golaxy_org_framework_addins_broker_IBroker)(nil)),
		"_ISubscriber": reflect.ValueOf((*_git_golaxy_org_framework_addins_broker_ISubscriber)(nil)),
	}
}

// _git_golaxy_org_framework_addins_broker_IBroker is an interface wrapper for IBroker type
type _git_golaxy_org_framework_addins_broker_IBroker struct {
	IValue                  interface{}
	WFlush                  func(ctx context.Context) error
	WGetDeliveryReliability func() broker.DeliveryReliability
	WGetMaxPayload          func() int64
	WGetSeparator           func() string
	WPublish                func(ctx context.Context, topic string, data []byte) error
	WSubscribe              func(ctx context.Context, pattern string, settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error)
	WSubscribef             func(ctx context.Context, format string, args ...any) func(settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error)
	WSubscribep             func(ctx context.Context, elems ...string) func(settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error)
}

func (W _git_golaxy_org_framework_addins_broker_IBroker) Flush(ctx context.Context) error {
	return W.WFlush(ctx)
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) GetDeliveryReliability() broker.DeliveryReliability {
	return W.WGetDeliveryReliability()
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) GetMaxPayload() int64 {
	return W.WGetMaxPayload()
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) GetSeparator() string {
	return W.WGetSeparator()
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) Publish(ctx context.Context, topic string, data []byte) error {
	return W.WPublish(ctx, topic, data)
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) Subscribe(ctx context.Context, pattern string, settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error) {
	return W.WSubscribe(ctx, pattern, settings...)
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) Subscribef(ctx context.Context, format string, args ...any) func(settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error) {
	return W.WSubscribef(ctx, format, args...)
}
func (W _git_golaxy_org_framework_addins_broker_IBroker) Subscribep(ctx context.Context, elems ...string) func(settings ...option.Setting[broker.SubscriberOptions]) (broker.ISubscriber, error) {
	return W.WSubscribep(ctx, elems...)
}

// _git_golaxy_org_framework_addins_broker_ISubscriber is an interface wrapper for ISubscriber type
type _git_golaxy_org_framework_addins_broker_ISubscriber struct {
	IValue        interface{}
	WDeadline     func() (deadline time.Time, ok bool)
	WDone         func() <-chan struct{}
	WErr          func() error
	WEventChan    func() <-chan broker.Event
	WPattern      func() string
	WQueue        func() string
	WUnsubscribe  func() async.AsyncRet
	WUnsubscribed func() async.AsyncRet
	WValue        func(key any) any
}

func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Done() <-chan struct{} { return W.WDone() }
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Err() error            { return W.WErr() }
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) EventChan() <-chan broker.Event {
	return W.WEventChan()
}
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Pattern() string { return W.WPattern() }
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Queue() string   { return W.WQueue() }
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Unsubscribe() async.AsyncRet {
	return W.WUnsubscribe()
}
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Unsubscribed() async.AsyncRet {
	return W.WUnsubscribed()
}
func (W _git_golaxy_org_framework_addins_broker_ISubscriber) Value(key any) any { return W.WValue(key) }
