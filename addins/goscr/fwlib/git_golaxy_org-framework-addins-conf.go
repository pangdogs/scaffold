// Code generated by 'yaegi extract git.golaxy.org/framework/addins/conf'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/framework/addins/conf"
	"github.com/spf13/viper"
	"reflect"
)

func init() {
	Symbols["git.golaxy.org/framework/addins/conf/conf"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Install":   reflect.ValueOf(&conf.Install).Elem(),
		"Name":      reflect.ValueOf(&conf.Name).Elem(),
		"Uninstall": reflect.ValueOf(&conf.Uninstall).Elem(),
		"Using":     reflect.ValueOf(&conf.Using).Elem(),
		"With":      reflect.ValueOf(&conf.With).Elem(),

		// type definitions
		"ConfigOptions": reflect.ValueOf((*conf.ConfigOptions)(nil)),
		"IConfig":       reflect.ValueOf((*conf.IConfig)(nil)),

		// interface wrapper definitions
		"_IConfig": reflect.ValueOf((*_git_golaxy_org_framework_addins_conf_IConfig)(nil)),
	}
}

// _git_golaxy_org_framework_addins_conf_IConfig is an interface wrapper for IConfig type
type _git_golaxy_org_framework_addins_conf_IConfig struct {
	IValue       interface{}
	WAppConf     func() *viper.Viper
	WHotfix      func() error
	WServiceConf func() *viper.Viper
}

func (W _git_golaxy_org_framework_addins_conf_IConfig) AppConf() *viper.Viper { return W.WAppConf() }
func (W _git_golaxy_org_framework_addins_conf_IConfig) Hotfix() error         { return W.WHotfix() }
func (W _git_golaxy_org_framework_addins_conf_IConfig) ServiceConf() *viper.Viper {
	return W.WServiceConf()
}
