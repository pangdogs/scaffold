// Code generated by 'yaegi extract git.golaxy.org/core/runtime'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/ec"
	"git.golaxy.org/core/event"
	"git.golaxy.org/core/extension"
	"git.golaxy.org/core/runtime"
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/iface"
	"git.golaxy.org/core/utils/uid"
	"reflect"
	"sync"
	"time"
)

func init() {
	Symbols["git.golaxy.org/core/runtime/runtime"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BindEventEntityManagerAddEntity":                   reflect.ValueOf(runtime.BindEventEntityManagerAddEntity),
		"BindEventEntityManagerEntityAddComponents":         reflect.ValueOf(runtime.BindEventEntityManagerEntityAddComponents),
		"BindEventEntityManagerEntityFirstTouchComponent":   reflect.ValueOf(runtime.BindEventEntityManagerEntityFirstTouchComponent),
		"BindEventEntityManagerEntityRemoveComponent":       reflect.ValueOf(runtime.BindEventEntityManagerEntityRemoveComponent),
		"BindEventEntityManagerRemoveEntity":                reflect.ValueOf(runtime.BindEventEntityManagerRemoveEntity),
		"BindEventEntityTreeAddNode":                        reflect.ValueOf(runtime.BindEventEntityTreeAddNode),
		"BindEventEntityTreeRemoveNode":                     reflect.ValueOf(runtime.BindEventEntityTreeRemoveNode),
		"Concurrent":                                        reflect.ValueOf(runtime.Concurrent),
		"Current":                                           reflect.ValueOf(runtime.Current),
		"ErrContext":                                        reflect.ValueOf(&runtime.ErrContext).Elem(),
		"ErrEntityManager":                                  reflect.ValueOf(&runtime.ErrEntityManager).Elem(),
		"ErrEntityTree":                                     reflect.ValueOf(&runtime.ErrEntityTree).Elem(),
		"ErrFrame":                                          reflect.ValueOf(&runtime.ErrFrame).Elem(),
		"EventEntityManagerAddEntityId":                     reflect.ValueOf(&runtime.EventEntityManagerAddEntityId).Elem(),
		"EventEntityManagerEntityAddComponentsId":           reflect.ValueOf(&runtime.EventEntityManagerEntityAddComponentsId).Elem(),
		"EventEntityManagerEntityFirstTouchComponentId":     reflect.ValueOf(&runtime.EventEntityManagerEntityFirstTouchComponentId).Elem(),
		"EventEntityManagerEntityRemoveComponentId":         reflect.ValueOf(&runtime.EventEntityManagerEntityRemoveComponentId).Elem(),
		"EventEntityManagerRemoveEntityId":                  reflect.ValueOf(&runtime.EventEntityManagerRemoveEntityId).Elem(),
		"EventEntityTreeAddNodeId":                          reflect.ValueOf(&runtime.EventEntityTreeAddNodeId).Elem(),
		"EventEntityTreeRemoveNodeId":                       reflect.ValueOf(&runtime.EventEntityTreeRemoveNodeId).Elem(),
		"HandleEventEntityManagerAddEntity":                 reflect.ValueOf(runtime.HandleEventEntityManagerAddEntity),
		"HandleEventEntityManagerEntityAddComponents":       reflect.ValueOf(runtime.HandleEventEntityManagerEntityAddComponents),
		"HandleEventEntityManagerEntityFirstTouchComponent": reflect.ValueOf(runtime.HandleEventEntityManagerEntityFirstTouchComponent),
		"HandleEventEntityManagerEntityRemoveComponent":     reflect.ValueOf(runtime.HandleEventEntityManagerEntityRemoveComponent),
		"HandleEventEntityManagerRemoveEntity":              reflect.ValueOf(runtime.HandleEventEntityManagerRemoveEntity),
		"HandleEventEntityTreeAddNode":                      reflect.ValueOf(runtime.HandleEventEntityTreeAddNode),
		"HandleEventEntityTreeRemoveNode":                   reflect.ValueOf(runtime.HandleEventEntityTreeRemoveNode),
		"NewContext":                                        reflect.ValueOf(runtime.NewContext),
		"NewFrame":                                          reflect.ValueOf(runtime.NewFrame),
		"RunningState_AddInActivated":                       reflect.ValueOf(runtime.RunningState_AddInActivated),
		"RunningState_AddInActivating":                      reflect.ValueOf(runtime.RunningState_AddInActivating),
		"RunningState_AddInDeactivated":                     reflect.ValueOf(runtime.RunningState_AddInDeactivated),
		"RunningState_AddInDeactivating":                    reflect.ValueOf(runtime.RunningState_AddInDeactivating),
		"RunningState_Birth":                                reflect.ValueOf(runtime.RunningState_Birth),
		"RunningState_FrameLoopBegin":                       reflect.ValueOf(runtime.RunningState_FrameLoopBegin),
		"RunningState_FrameLoopEnd":                         reflect.ValueOf(runtime.RunningState_FrameLoopEnd),
		"RunningState_FrameUpdateBegin":                     reflect.ValueOf(runtime.RunningState_FrameUpdateBegin),
		"RunningState_FrameUpdateEnd":                       reflect.ValueOf(runtime.RunningState_FrameUpdateEnd),
		"RunningState_RunCallBegin":                         reflect.ValueOf(runtime.RunningState_RunCallBegin),
		"RunningState_RunCallEnd":                           reflect.ValueOf(runtime.RunningState_RunCallEnd),
		"RunningState_RunGCBegin":                           reflect.ValueOf(runtime.RunningState_RunGCBegin),
		"RunningState_RunGCEnd":                             reflect.ValueOf(runtime.RunningState_RunGCEnd),
		"RunningState_Started":                              reflect.ValueOf(runtime.RunningState_Started),
		"RunningState_Starting":                             reflect.ValueOf(runtime.RunningState_Starting),
		"RunningState_Terminated":                           reflect.ValueOf(runtime.RunningState_Terminated),
		"RunningState_Terminating":                          reflect.ValueOf(runtime.RunningState_Terminating),
		"UnsafeConcurrentContext":                           reflect.ValueOf(runtime.UnsafeConcurrentContext),
		"UnsafeContext":                                     reflect.ValueOf(runtime.UnsafeContext),
		"UnsafeFrame":                                       reflect.ValueOf(runtime.UnsafeFrame),
		"UnsafeNewContext":                                  reflect.ValueOf(runtime.UnsafeNewContext),
		"With":                                              reflect.ValueOf(&runtime.With).Elem(),

		// type definitions
		"ConcurrentContext":                                  reflect.ValueOf((*runtime.ConcurrentContext)(nil)),
		"ConcurrentContextProvider":                          reflect.ValueOf((*runtime.ConcurrentContextProvider)(nil)),
		"Context":                                            reflect.ValueOf((*runtime.Context)(nil)),
		"ContextBehavior":                                    reflect.ValueOf((*runtime.ContextBehavior)(nil)),
		"ContextOptions":                                     reflect.ValueOf((*runtime.ContextOptions)(nil)),
		"CurrentContextProvider":                             reflect.ValueOf((*runtime.CurrentContextProvider)(nil)),
		"EntityManager":                                      reflect.ValueOf((*runtime.EntityManager)(nil)),
		"EntityTree":                                         reflect.ValueOf((*runtime.EntityTree)(nil)),
		"EventEntityManagerAddEntity":                        reflect.ValueOf((*runtime.EventEntityManagerAddEntity)(nil)),
		"EventEntityManagerAddEntityHandler":                 reflect.ValueOf((*runtime.EventEntityManagerAddEntityHandler)(nil)),
		"EventEntityManagerEntityAddComponents":              reflect.ValueOf((*runtime.EventEntityManagerEntityAddComponents)(nil)),
		"EventEntityManagerEntityAddComponentsHandler":       reflect.ValueOf((*runtime.EventEntityManagerEntityAddComponentsHandler)(nil)),
		"EventEntityManagerEntityFirstTouchComponent":        reflect.ValueOf((*runtime.EventEntityManagerEntityFirstTouchComponent)(nil)),
		"EventEntityManagerEntityFirstTouchComponentHandler": reflect.ValueOf((*runtime.EventEntityManagerEntityFirstTouchComponentHandler)(nil)),
		"EventEntityManagerEntityRemoveComponent":            reflect.ValueOf((*runtime.EventEntityManagerEntityRemoveComponent)(nil)),
		"EventEntityManagerEntityRemoveComponentHandler":     reflect.ValueOf((*runtime.EventEntityManagerEntityRemoveComponentHandler)(nil)),
		"EventEntityManagerRemoveEntity":                     reflect.ValueOf((*runtime.EventEntityManagerRemoveEntity)(nil)),
		"EventEntityManagerRemoveEntityHandler":              reflect.ValueOf((*runtime.EventEntityManagerRemoveEntityHandler)(nil)),
		"EventEntityTreeAddNode":                             reflect.ValueOf((*runtime.EventEntityTreeAddNode)(nil)),
		"EventEntityTreeAddNodeHandler":                      reflect.ValueOf((*runtime.EventEntityTreeAddNodeHandler)(nil)),
		"EventEntityTreeRemoveNode":                          reflect.ValueOf((*runtime.EventEntityTreeRemoveNode)(nil)),
		"EventEntityTreeRemoveNodeHandler":                   reflect.ValueOf((*runtime.EventEntityTreeRemoveNodeHandler)(nil)),
		"Frame":                                              reflect.ValueOf((*runtime.Frame)(nil)),
		"FrameOptions":                                       reflect.ValueOf((*runtime.FrameOptions)(nil)),
		"GC":                                                 reflect.ValueOf((*runtime.GC)(nil)),
		"GCCollector":                                        reflect.ValueOf((*runtime.GCCollector)(nil)),
		"IEntityManagerEventTab":                             reflect.ValueOf((*runtime.IEntityManagerEventTab)(nil)),
		"IEntityTreeEventTab":                                reflect.ValueOf((*runtime.IEntityTreeEventTab)(nil)),
		"RunningHandler":                                     reflect.ValueOf((*runtime.RunningHandler)(nil)),
		"RunningState":                                       reflect.ValueOf((*runtime.RunningState)(nil)),

		// interface wrapper definitions
		"_ConcurrentContext":                           reflect.ValueOf((*_git_golaxy_org_core_runtime_ConcurrentContext)(nil)),
		"_ConcurrentContextProvider":                   reflect.ValueOf((*_git_golaxy_org_core_runtime_ConcurrentContextProvider)(nil)),
		"_Context":                                     reflect.ValueOf((*_git_golaxy_org_core_runtime_Context)(nil)),
		"_CurrentContextProvider":                      reflect.ValueOf((*_git_golaxy_org_core_runtime_CurrentContextProvider)(nil)),
		"_EntityManager":                               reflect.ValueOf((*_git_golaxy_org_core_runtime_EntityManager)(nil)),
		"_EntityTree":                                  reflect.ValueOf((*_git_golaxy_org_core_runtime_EntityTree)(nil)),
		"_EventEntityManagerAddEntity":                 reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityManagerAddEntity)(nil)),
		"_EventEntityManagerEntityAddComponents":       reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityManagerEntityAddComponents)(nil)),
		"_EventEntityManagerEntityFirstTouchComponent": reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityManagerEntityFirstTouchComponent)(nil)),
		"_EventEntityManagerEntityRemoveComponent":     reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityManagerEntityRemoveComponent)(nil)),
		"_EventEntityManagerRemoveEntity":              reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityManagerRemoveEntity)(nil)),
		"_EventEntityTreeAddNode":                      reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityTreeAddNode)(nil)),
		"_EventEntityTreeRemoveNode":                   reflect.ValueOf((*_git_golaxy_org_core_runtime_EventEntityTreeRemoveNode)(nil)),
		"_Frame":                                       reflect.ValueOf((*_git_golaxy_org_core_runtime_Frame)(nil)),
		"_GC":                                          reflect.ValueOf((*_git_golaxy_org_core_runtime_GC)(nil)),
		"_GCCollector":                                 reflect.ValueOf((*_git_golaxy_org_core_runtime_GCCollector)(nil)),
		"_IEntityManagerEventTab":                      reflect.ValueOf((*_git_golaxy_org_core_runtime_IEntityManagerEventTab)(nil)),
		"_IEntityTreeEventTab":                         reflect.ValueOf((*_git_golaxy_org_core_runtime_IEntityTreeEventTab)(nil)),
	}
}

// _git_golaxy_org_core_runtime_ConcurrentContext is an interface wrapper for ConcurrentContext type
type _git_golaxy_org_core_runtime_ConcurrentContext struct {
	IValue                interface{}
	WCall                 func(fun generic.FuncVar0[any, async.Ret], args ...any) async.AsyncRet
	WCallDelegate         func(fun generic.DelegateVar0[any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateVoid     func(fun generic.DelegateVoidVar0[any], args ...any) async.AsyncRet
	WCallVoid             func(fun generic.ActionVar0[any], args ...any) async.AsyncRet
	WDeadline             func() (deadline time.Time, ok bool)
	WDone                 func() <-chan struct{}
	WErr                  func() error
	WGetAutoRecover       func() bool
	WGetConcurrentContext func() iface.Cache
	WGetId                func() uid.Id
	WGetName              func() string
	WGetParentContext     func() context.Context
	WGetReportError       func() chan error
	WGetWaitGroup         func() *sync.WaitGroup
	WString               func() string
	WTerminate            func() <-chan struct{}
	WTerminated           func() <-chan struct{}
	WValue                func(key any) any
}

func (W _git_golaxy_org_core_runtime_ConcurrentContext) Call(fun generic.FuncVar0[any, async.Ret], args ...any) async.AsyncRet {
	return W.WCall(fun, args...)
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) CallDelegate(fun generic.DelegateVar0[any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegate(fun, args...)
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) CallDelegateVoid(fun generic.DelegateVoidVar0[any], args ...any) async.AsyncRet {
	return W.WCallDelegateVoid(fun, args...)
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) CallVoid(fun generic.ActionVar0[any], args ...any) async.AsyncRet {
	return W.WCallVoid(fun, args...)
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Done() <-chan struct{} { return W.WDone() }
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Err() error            { return W.WErr() }
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetAutoRecover() bool {
	return W.WGetAutoRecover()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetId() uid.Id   { return W.WGetId() }
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetName() string { return W.WGetName() }
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetParentContext() context.Context {
	return W.WGetParentContext()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetReportError() chan error {
	return W.WGetReportError()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) GetWaitGroup() *sync.WaitGroup {
	return W.WGetWaitGroup()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Terminate() <-chan struct{} {
	return W.WTerminate()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Terminated() <-chan struct{} {
	return W.WTerminated()
}
func (W _git_golaxy_org_core_runtime_ConcurrentContext) Value(key any) any { return W.WValue(key) }

// _git_golaxy_org_core_runtime_ConcurrentContextProvider is an interface wrapper for ConcurrentContextProvider type
type _git_golaxy_org_core_runtime_ConcurrentContextProvider struct {
	IValue                interface{}
	WGetConcurrentContext func() iface.Cache
}

func (W _git_golaxy_org_core_runtime_ConcurrentContextProvider) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}

// _git_golaxy_org_core_runtime_Context is an interface wrapper for Context type
type _git_golaxy_org_core_runtime_Context struct {
	IValue                interface{}
	WActivateEvent        func(event event.IEventCtrl, recursion event.EventRecursion)
	WCall                 func(fun generic.FuncVar0[any, async.Ret], args ...any) async.AsyncRet
	WCallDelegate         func(fun generic.DelegateVar0[any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateVoid     func(fun generic.DelegateVoidVar0[any], args ...any) async.AsyncRet
	WCallVoid             func(fun generic.ActionVar0[any], args ...any) async.AsyncRet
	WCollectGC            func(gc runtime.GC)
	WDeadline             func() (deadline time.Time, ok bool)
	WDone                 func() <-chan struct{}
	WErr                  func() error
	WGetAddInManager      func() extension.AddInManager
	WGetAutoRecover       func() bool
	WGetConcurrentContext func() iface.Cache
	WGetCurrentContext    func() iface.Cache
	WGetEntityManager     func() runtime.EntityManager
	WGetEntityTree        func() runtime.EntityTree
	WGetFrame             func() runtime.Frame
	WGetId                func() uid.Id
	WGetInstanceFaceCache func() iface.Cache
	WGetName              func() string
	WGetParentContext     func() context.Context
	WGetReflected         func() reflect.Value
	WGetReportError       func() chan error
	WGetWaitGroup         func() *sync.WaitGroup
	WManagedHooks         func(hooks ...event.Hook)
	WString               func() string
	WTerminate            func() <-chan struct{}
	WTerminated           func() <-chan struct{}
	WValue                func(key any) any
}

func (W _git_golaxy_org_core_runtime_Context) ActivateEvent(event event.IEventCtrl, recursion event.EventRecursion) {
	W.WActivateEvent(event, recursion)
}
func (W _git_golaxy_org_core_runtime_Context) Call(fun generic.FuncVar0[any, async.Ret], args ...any) async.AsyncRet {
	return W.WCall(fun, args...)
}
func (W _git_golaxy_org_core_runtime_Context) CallDelegate(fun generic.DelegateVar0[any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegate(fun, args...)
}
func (W _git_golaxy_org_core_runtime_Context) CallDelegateVoid(fun generic.DelegateVoidVar0[any], args ...any) async.AsyncRet {
	return W.WCallDelegateVoid(fun, args...)
}
func (W _git_golaxy_org_core_runtime_Context) CallVoid(fun generic.ActionVar0[any], args ...any) async.AsyncRet {
	return W.WCallVoid(fun, args...)
}
func (W _git_golaxy_org_core_runtime_Context) CollectGC(gc runtime.GC) { W.WCollectGC(gc) }
func (W _git_golaxy_org_core_runtime_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_core_runtime_Context) Done() <-chan struct{} { return W.WDone() }
func (W _git_golaxy_org_core_runtime_Context) Err() error            { return W.WErr() }
func (W _git_golaxy_org_core_runtime_Context) GetAddInManager() extension.AddInManager {
	return W.WGetAddInManager()
}
func (W _git_golaxy_org_core_runtime_Context) GetAutoRecover() bool { return W.WGetAutoRecover() }
func (W _git_golaxy_org_core_runtime_Context) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}
func (W _git_golaxy_org_core_runtime_Context) GetCurrentContext() iface.Cache {
	return W.WGetCurrentContext()
}
func (W _git_golaxy_org_core_runtime_Context) GetEntityManager() runtime.EntityManager {
	return W.WGetEntityManager()
}
func (W _git_golaxy_org_core_runtime_Context) GetEntityTree() runtime.EntityTree {
	return W.WGetEntityTree()
}
func (W _git_golaxy_org_core_runtime_Context) GetFrame() runtime.Frame { return W.WGetFrame() }
func (W _git_golaxy_org_core_runtime_Context) GetId() uid.Id           { return W.WGetId() }
func (W _git_golaxy_org_core_runtime_Context) GetInstanceFaceCache() iface.Cache {
	return W.WGetInstanceFaceCache()
}
func (W _git_golaxy_org_core_runtime_Context) GetName() string { return W.WGetName() }
func (W _git_golaxy_org_core_runtime_Context) GetParentContext() context.Context {
	return W.WGetParentContext()
}
func (W _git_golaxy_org_core_runtime_Context) GetReflected() reflect.Value { return W.WGetReflected() }
func (W _git_golaxy_org_core_runtime_Context) GetReportError() chan error  { return W.WGetReportError() }
func (W _git_golaxy_org_core_runtime_Context) GetWaitGroup() *sync.WaitGroup {
	return W.WGetWaitGroup()
}
func (W _git_golaxy_org_core_runtime_Context) ManagedHooks(hooks ...event.Hook) {
	W.WManagedHooks(hooks...)
}
func (W _git_golaxy_org_core_runtime_Context) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _git_golaxy_org_core_runtime_Context) Terminate() <-chan struct{}  { return W.WTerminate() }
func (W _git_golaxy_org_core_runtime_Context) Terminated() <-chan struct{} { return W.WTerminated() }
func (W _git_golaxy_org_core_runtime_Context) Value(key any) any           { return W.WValue(key) }

// _git_golaxy_org_core_runtime_CurrentContextProvider is an interface wrapper for CurrentContextProvider type
type _git_golaxy_org_core_runtime_CurrentContextProvider struct {
	IValue                interface{}
	WGetConcurrentContext func() iface.Cache
	WGetCurrentContext    func() iface.Cache
}

func (W _git_golaxy_org_core_runtime_CurrentContextProvider) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}
func (W _git_golaxy_org_core_runtime_CurrentContextProvider) GetCurrentContext() iface.Cache {
	return W.WGetCurrentContext()
}

// _git_golaxy_org_core_runtime_EntityManager is an interface wrapper for EntityManager type
type _git_golaxy_org_core_runtime_EntityManager struct {
	IValue                                       interface{}
	WAddEntity                                   func(entity ec.Entity) error
	WContainsEntity                              func(id uid.Id) bool
	WCountEntities                               func() int
	WEventEntityManagerAddEntity                 func() event.IEvent
	WEventEntityManagerEntityAddComponents       func() event.IEvent
	WEventEntityManagerEntityFirstTouchComponent func() event.IEvent
	WEventEntityManagerEntityRemoveComponent     func() event.IEvent
	WEventEntityManagerRemoveEntity              func() event.IEvent
	WFilterEntities                              func(fun generic.Func1[ec.Entity, bool]) []ec.Entity
	WGetConcurrentContext                        func() iface.Cache
	WGetCurrentContext                           func() iface.Cache
	WGetEntities                                 func() []ec.Entity
	WGetEntity                                   func(id uid.Id) (ec.Entity, bool)
	WRangeEntities                               func(fun generic.Func1[ec.Entity, bool])
	WRemoveEntity                                func(id uid.Id)
	WReversedRangeEntities                       func(fun generic.Func1[ec.Entity, bool])
}

func (W _git_golaxy_org_core_runtime_EntityManager) AddEntity(entity ec.Entity) error {
	return W.WAddEntity(entity)
}
func (W _git_golaxy_org_core_runtime_EntityManager) ContainsEntity(id uid.Id) bool {
	return W.WContainsEntity(id)
}
func (W _git_golaxy_org_core_runtime_EntityManager) CountEntities() int { return W.WCountEntities() }
func (W _git_golaxy_org_core_runtime_EntityManager) EventEntityManagerAddEntity() event.IEvent {
	return W.WEventEntityManagerAddEntity()
}
func (W _git_golaxy_org_core_runtime_EntityManager) EventEntityManagerEntityAddComponents() event.IEvent {
	return W.WEventEntityManagerEntityAddComponents()
}
func (W _git_golaxy_org_core_runtime_EntityManager) EventEntityManagerEntityFirstTouchComponent() event.IEvent {
	return W.WEventEntityManagerEntityFirstTouchComponent()
}
func (W _git_golaxy_org_core_runtime_EntityManager) EventEntityManagerEntityRemoveComponent() event.IEvent {
	return W.WEventEntityManagerEntityRemoveComponent()
}
func (W _git_golaxy_org_core_runtime_EntityManager) EventEntityManagerRemoveEntity() event.IEvent {
	return W.WEventEntityManagerRemoveEntity()
}
func (W _git_golaxy_org_core_runtime_EntityManager) FilterEntities(fun generic.Func1[ec.Entity, bool]) []ec.Entity {
	return W.WFilterEntities(fun)
}
func (W _git_golaxy_org_core_runtime_EntityManager) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}
func (W _git_golaxy_org_core_runtime_EntityManager) GetCurrentContext() iface.Cache {
	return W.WGetCurrentContext()
}
func (W _git_golaxy_org_core_runtime_EntityManager) GetEntities() []ec.Entity {
	return W.WGetEntities()
}
func (W _git_golaxy_org_core_runtime_EntityManager) GetEntity(id uid.Id) (ec.Entity, bool) {
	return W.WGetEntity(id)
}
func (W _git_golaxy_org_core_runtime_EntityManager) RangeEntities(fun generic.Func1[ec.Entity, bool]) {
	W.WRangeEntities(fun)
}
func (W _git_golaxy_org_core_runtime_EntityManager) RemoveEntity(id uid.Id) { W.WRemoveEntity(id) }
func (W _git_golaxy_org_core_runtime_EntityManager) ReversedRangeEntities(fun generic.Func1[ec.Entity, bool]) {
	W.WReversedRangeEntities(fun)
}

// _git_golaxy_org_core_runtime_EntityTree is an interface wrapper for EntityTree type
type _git_golaxy_org_core_runtime_EntityTree struct {
	IValue                     interface{}
	WAddNode                   func(entity ec.Entity, parentId uid.Id) error
	WChangeParent              func(entityId uid.Id, parentId uid.Id) error
	WCountChildren             func(entityId uid.Id) int
	WEventEntityTreeAddNode    func() event.IEvent
	WEventEntityTreeRemoveNode func() event.IEvent
	WFilterChildren            func(entityId uid.Id, fun generic.Func1[ec.Entity, bool]) []ec.Entity
	WGetChildren               func(entityId uid.Id) []ec.Entity
	WGetConcurrentContext      func() iface.Cache
	WGetCurrentContext         func() iface.Cache
	WGetParent                 func(entityId uid.Id) (ec.Entity, bool)
	WIsTop                     func(entityId uid.Id) bool
	WPruningNode               func(entityId uid.Id)
	WRangeChildren             func(entityId uid.Id, fun generic.Func1[ec.Entity, bool])
	WReversedRangeChildren     func(entityId uid.Id, fun generic.Func1[ec.Entity, bool])
}

func (W _git_golaxy_org_core_runtime_EntityTree) AddNode(entity ec.Entity, parentId uid.Id) error {
	return W.WAddNode(entity, parentId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) ChangeParent(entityId uid.Id, parentId uid.Id) error {
	return W.WChangeParent(entityId, parentId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) CountChildren(entityId uid.Id) int {
	return W.WCountChildren(entityId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) EventEntityTreeAddNode() event.IEvent {
	return W.WEventEntityTreeAddNode()
}
func (W _git_golaxy_org_core_runtime_EntityTree) EventEntityTreeRemoveNode() event.IEvent {
	return W.WEventEntityTreeRemoveNode()
}
func (W _git_golaxy_org_core_runtime_EntityTree) FilterChildren(entityId uid.Id, fun generic.Func1[ec.Entity, bool]) []ec.Entity {
	return W.WFilterChildren(entityId, fun)
}
func (W _git_golaxy_org_core_runtime_EntityTree) GetChildren(entityId uid.Id) []ec.Entity {
	return W.WGetChildren(entityId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) GetConcurrentContext() iface.Cache {
	return W.WGetConcurrentContext()
}
func (W _git_golaxy_org_core_runtime_EntityTree) GetCurrentContext() iface.Cache {
	return W.WGetCurrentContext()
}
func (W _git_golaxy_org_core_runtime_EntityTree) GetParent(entityId uid.Id) (ec.Entity, bool) {
	return W.WGetParent(entityId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) IsTop(entityId uid.Id) bool {
	return W.WIsTop(entityId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) PruningNode(entityId uid.Id) {
	W.WPruningNode(entityId)
}
func (W _git_golaxy_org_core_runtime_EntityTree) RangeChildren(entityId uid.Id, fun generic.Func1[ec.Entity, bool]) {
	W.WRangeChildren(entityId, fun)
}
func (W _git_golaxy_org_core_runtime_EntityTree) ReversedRangeChildren(entityId uid.Id, fun generic.Func1[ec.Entity, bool]) {
	W.WReversedRangeChildren(entityId, fun)
}

// _git_golaxy_org_core_runtime_EventEntityManagerAddEntity is an interface wrapper for EventEntityManagerAddEntity type
type _git_golaxy_org_core_runtime_EventEntityManagerAddEntity struct {
	IValue                    interface{}
	WOnEntityManagerAddEntity func(entityManager runtime.EntityManager, entity ec.Entity)
}

func (W _git_golaxy_org_core_runtime_EventEntityManagerAddEntity) OnEntityManagerAddEntity(entityManager runtime.EntityManager, entity ec.Entity) {
	W.WOnEntityManagerAddEntity(entityManager, entity)
}

// _git_golaxy_org_core_runtime_EventEntityManagerEntityAddComponents is an interface wrapper for EventEntityManagerEntityAddComponents type
type _git_golaxy_org_core_runtime_EventEntityManagerEntityAddComponents struct {
	IValue                              interface{}
	WOnEntityManagerEntityAddComponents func(entityManager runtime.EntityManager, entity ec.Entity, components []ec.Component)
}

func (W _git_golaxy_org_core_runtime_EventEntityManagerEntityAddComponents) OnEntityManagerEntityAddComponents(entityManager runtime.EntityManager, entity ec.Entity, components []ec.Component) {
	W.WOnEntityManagerEntityAddComponents(entityManager, entity, components)
}

// _git_golaxy_org_core_runtime_EventEntityManagerEntityFirstTouchComponent is an interface wrapper for EventEntityManagerEntityFirstTouchComponent type
type _git_golaxy_org_core_runtime_EventEntityManagerEntityFirstTouchComponent struct {
	IValue                                    interface{}
	WOnEntityManagerEntityFirstTouchComponent func(entityManager runtime.EntityManager, entity ec.Entity, component ec.Component)
}

func (W _git_golaxy_org_core_runtime_EventEntityManagerEntityFirstTouchComponent) OnEntityManagerEntityFirstTouchComponent(entityManager runtime.EntityManager, entity ec.Entity, component ec.Component) {
	W.WOnEntityManagerEntityFirstTouchComponent(entityManager, entity, component)
}

// _git_golaxy_org_core_runtime_EventEntityManagerEntityRemoveComponent is an interface wrapper for EventEntityManagerEntityRemoveComponent type
type _git_golaxy_org_core_runtime_EventEntityManagerEntityRemoveComponent struct {
	IValue                                interface{}
	WOnEntityManagerEntityRemoveComponent func(entityManager runtime.EntityManager, entity ec.Entity, component ec.Component)
}

func (W _git_golaxy_org_core_runtime_EventEntityManagerEntityRemoveComponent) OnEntityManagerEntityRemoveComponent(entityManager runtime.EntityManager, entity ec.Entity, component ec.Component) {
	W.WOnEntityManagerEntityRemoveComponent(entityManager, entity, component)
}

// _git_golaxy_org_core_runtime_EventEntityManagerRemoveEntity is an interface wrapper for EventEntityManagerRemoveEntity type
type _git_golaxy_org_core_runtime_EventEntityManagerRemoveEntity struct {
	IValue                       interface{}
	WOnEntityManagerRemoveEntity func(entityManager runtime.EntityManager, entity ec.Entity)
}

func (W _git_golaxy_org_core_runtime_EventEntityManagerRemoveEntity) OnEntityManagerRemoveEntity(entityManager runtime.EntityManager, entity ec.Entity) {
	W.WOnEntityManagerRemoveEntity(entityManager, entity)
}

// _git_golaxy_org_core_runtime_EventEntityTreeAddNode is an interface wrapper for EventEntityTreeAddNode type
type _git_golaxy_org_core_runtime_EventEntityTreeAddNode struct {
	IValue               interface{}
	WOnEntityTreeAddNode func(entityTree runtime.EntityTree, parent ec.Entity, child ec.Entity)
}

func (W _git_golaxy_org_core_runtime_EventEntityTreeAddNode) OnEntityTreeAddNode(entityTree runtime.EntityTree, parent ec.Entity, child ec.Entity) {
	W.WOnEntityTreeAddNode(entityTree, parent, child)
}

// _git_golaxy_org_core_runtime_EventEntityTreeRemoveNode is an interface wrapper for EventEntityTreeRemoveNode type
type _git_golaxy_org_core_runtime_EventEntityTreeRemoveNode struct {
	IValue                  interface{}
	WOnEntityTreeRemoveNode func(entityTree runtime.EntityTree, parent ec.Entity, child ec.Entity)
}

func (W _git_golaxy_org_core_runtime_EventEntityTreeRemoveNode) OnEntityTreeRemoveNode(entityTree runtime.EntityTree, parent ec.Entity, child ec.Entity) {
	W.WOnEntityTreeRemoveNode(entityTree, parent, child)
}

// _git_golaxy_org_core_runtime_Frame is an interface wrapper for Frame type
type _git_golaxy_org_core_runtime_Frame struct {
	IValue                   interface{}
	WGetCurFPS               func() float32
	WGetCurFrames            func() int64
	WGetLastLoopElapseTime   func() time.Duration
	WGetLastUpdateElapseTime func() time.Duration
	WGetLoopBeginTime        func() time.Time
	WGetRunningBeginTime     func() time.Time
	WGetRunningElapseTime    func() time.Duration
	WGetTargetFPS            func() float32
	WGetTotalFrames          func() int64
	WGetUpdateBeginTime      func() time.Time
}

func (W _git_golaxy_org_core_runtime_Frame) GetCurFPS() float32  { return W.WGetCurFPS() }
func (W _git_golaxy_org_core_runtime_Frame) GetCurFrames() int64 { return W.WGetCurFrames() }
func (W _git_golaxy_org_core_runtime_Frame) GetLastLoopElapseTime() time.Duration {
	return W.WGetLastLoopElapseTime()
}
func (W _git_golaxy_org_core_runtime_Frame) GetLastUpdateElapseTime() time.Duration {
	return W.WGetLastUpdateElapseTime()
}
func (W _git_golaxy_org_core_runtime_Frame) GetLoopBeginTime() time.Time {
	return W.WGetLoopBeginTime()
}
func (W _git_golaxy_org_core_runtime_Frame) GetRunningBeginTime() time.Time {
	return W.WGetRunningBeginTime()
}
func (W _git_golaxy_org_core_runtime_Frame) GetRunningElapseTime() time.Duration {
	return W.WGetRunningElapseTime()
}
func (W _git_golaxy_org_core_runtime_Frame) GetTargetFPS() float32 { return W.WGetTargetFPS() }
func (W _git_golaxy_org_core_runtime_Frame) GetTotalFrames() int64 { return W.WGetTotalFrames() }
func (W _git_golaxy_org_core_runtime_Frame) GetUpdateBeginTime() time.Time {
	return W.WGetUpdateBeginTime()
}

// _git_golaxy_org_core_runtime_GC is an interface wrapper for GC type
type _git_golaxy_org_core_runtime_GC struct {
	IValue  interface{}
	WGC     func()
	WNeedGC func() bool
}

func (W _git_golaxy_org_core_runtime_GC) GC()          { W.WGC() }
func (W _git_golaxy_org_core_runtime_GC) NeedGC() bool { return W.WNeedGC() }

// _git_golaxy_org_core_runtime_GCCollector is an interface wrapper for GCCollector type
type _git_golaxy_org_core_runtime_GCCollector struct {
	IValue     interface{}
	WCollectGC func(gc runtime.GC)
}

func (W _git_golaxy_org_core_runtime_GCCollector) CollectGC(gc runtime.GC) { W.WCollectGC(gc) }

// _git_golaxy_org_core_runtime_IEntityManagerEventTab is an interface wrapper for IEntityManagerEventTab type
type _git_golaxy_org_core_runtime_IEntityManagerEventTab struct {
	IValue                                       interface{}
	WEventEntityManagerAddEntity                 func() event.IEvent
	WEventEntityManagerEntityAddComponents       func() event.IEvent
	WEventEntityManagerEntityFirstTouchComponent func() event.IEvent
	WEventEntityManagerEntityRemoveComponent     func() event.IEvent
	WEventEntityManagerRemoveEntity              func() event.IEvent
}

func (W _git_golaxy_org_core_runtime_IEntityManagerEventTab) EventEntityManagerAddEntity() event.IEvent {
	return W.WEventEntityManagerAddEntity()
}
func (W _git_golaxy_org_core_runtime_IEntityManagerEventTab) EventEntityManagerEntityAddComponents() event.IEvent {
	return W.WEventEntityManagerEntityAddComponents()
}
func (W _git_golaxy_org_core_runtime_IEntityManagerEventTab) EventEntityManagerEntityFirstTouchComponent() event.IEvent {
	return W.WEventEntityManagerEntityFirstTouchComponent()
}
func (W _git_golaxy_org_core_runtime_IEntityManagerEventTab) EventEntityManagerEntityRemoveComponent() event.IEvent {
	return W.WEventEntityManagerEntityRemoveComponent()
}
func (W _git_golaxy_org_core_runtime_IEntityManagerEventTab) EventEntityManagerRemoveEntity() event.IEvent {
	return W.WEventEntityManagerRemoveEntity()
}

// _git_golaxy_org_core_runtime_IEntityTreeEventTab is an interface wrapper for IEntityTreeEventTab type
type _git_golaxy_org_core_runtime_IEntityTreeEventTab struct {
	IValue                     interface{}
	WEventEntityTreeAddNode    func() event.IEvent
	WEventEntityTreeRemoveNode func() event.IEvent
}

func (W _git_golaxy_org_core_runtime_IEntityTreeEventTab) EventEntityTreeAddNode() event.IEvent {
	return W.WEventEntityTreeAddNode()
}
func (W _git_golaxy_org_core_runtime_IEntityTreeEventTab) EventEntityTreeRemoveNode() event.IEvent {
	return W.WEventEntityTreeRemoveNode()
}
