// Code generated by 'yaegi extract git.golaxy.org/core/service'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/ec"
	"git.golaxy.org/core/ec/pt"
	"git.golaxy.org/core/extension"
	"git.golaxy.org/core/service"
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/iface"
	"git.golaxy.org/core/utils/uid"
	"reflect"
	"sync"
	"time"
)

func init() {
	Symbols["git.golaxy.org/core/service/service"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Current":                          reflect.ValueOf(service.Current),
		"ErrContext":                       reflect.ValueOf(&service.ErrContext).Elem(),
		"ErrEntityManager":                 reflect.ValueOf(&service.ErrEntityManager).Elem(),
		"NewContext":                       reflect.ValueOf(service.NewContext),
		"RunningStatus_AddInActivated":     reflect.ValueOf(service.RunningStatus_AddInActivated),
		"RunningStatus_AddInActivating":    reflect.ValueOf(service.RunningStatus_AddInActivating),
		"RunningStatus_AddInDeactivated":   reflect.ValueOf(service.RunningStatus_AddInDeactivated),
		"RunningStatus_AddInDeactivating":  reflect.ValueOf(service.RunningStatus_AddInDeactivating),
		"RunningStatus_Birth":              reflect.ValueOf(service.RunningStatus_Birth),
		"RunningStatus_EntityPTDeclared":   reflect.ValueOf(service.RunningStatus_EntityPTDeclared),
		"RunningStatus_EntityPTRedeclared": reflect.ValueOf(service.RunningStatus_EntityPTRedeclared),
		"RunningStatus_EntityPTUndeclared": reflect.ValueOf(service.RunningStatus_EntityPTUndeclared),
		"RunningStatus_Started":            reflect.ValueOf(service.RunningStatus_Started),
		"RunningStatus_Starting":           reflect.ValueOf(service.RunningStatus_Starting),
		"RunningStatus_Terminated":         reflect.ValueOf(service.RunningStatus_Terminated),
		"RunningStatus_Terminating":        reflect.ValueOf(service.RunningStatus_Terminating),
		"UnsafeContext":                    reflect.ValueOf(service.UnsafeContext),
		"UnsafeNewContext":                 reflect.ValueOf(service.UnsafeNewContext),
		"With":                             reflect.ValueOf(&service.With).Elem(),

		// type definitions
		"Caller":          reflect.ValueOf((*service.Caller)(nil)),
		"Context":         reflect.ValueOf((*service.Context)(nil)),
		"ContextBehavior": reflect.ValueOf((*service.ContextBehavior)(nil)),
		"ContextOptions":  reflect.ValueOf((*service.ContextOptions)(nil)),
		"EntityManager":   reflect.ValueOf((*service.EntityManager)(nil)),
		"RunningHandler":  reflect.ValueOf((*service.RunningHandler)(nil)),
		"RunningStatus":   reflect.ValueOf((*service.RunningStatus)(nil)),

		// interface wrapper definitions
		"_Caller":        reflect.ValueOf((*_git_golaxy_org_core_service_Caller)(nil)),
		"_Context":       reflect.ValueOf((*_git_golaxy_org_core_service_Context)(nil)),
		"_EntityManager": reflect.ValueOf((*_git_golaxy_org_core_service_EntityManager)(nil)),
	}
}

// _git_golaxy_org_core_service_Caller is an interface wrapper for Caller type
type _git_golaxy_org_core_service_Caller struct {
	IValue                 interface{}
	WCallAsync             func(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateAsync     func(entityId uid.Id, fun generic.DelegateVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateVoidAsync func(entityId uid.Id, fun generic.DelegateVoidVar1[ec.Entity, any], args ...any) async.AsyncRet
	WCallVoidAsync         func(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet
}

func (W _git_golaxy_org_core_service_Caller) CallAsync(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallDelegateAsync(entityId uid.Id, fun generic.DelegateVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegateAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallDelegateVoidAsync(entityId uid.Id, fun generic.DelegateVoidVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallDelegateVoidAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallVoidAsync(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoidAsync(entityId, fun, args...)
}

// _git_golaxy_org_core_service_Context is an interface wrapper for Context type
type _git_golaxy_org_core_service_Context struct {
	IValue                 interface{}
	WCallAsync             func(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateAsync     func(entityId uid.Id, fun generic.DelegateVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegateVoidAsync func(entityId uid.Id, fun generic.DelegateVoidVar1[ec.Entity, any], args ...any) async.AsyncRet
	WCallVoidAsync         func(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet
	WDeadline              func() (deadline time.Time, ok bool)
	WDone                  func() <-chan struct{}
	WErr                   func() error
	WGetAddInManager       func() extension.AddInManager
	WGetAutoRecover        func() bool
	WGetEntityLib          func() pt.EntityLib
	WGetEntityManager      func() service.EntityManager
	WGetId                 func() uid.Id
	WGetInstanceFaceCache  func() iface.Cache
	WGetName               func() string
	WGetParentContext      func() context.Context
	WGetReflected          func() reflect.Value
	WGetReportError        func() chan error
	WGetWaitGroup          func() *sync.WaitGroup
	WString                func() string
	WTerminate             func() <-chan struct{}
	WTerminated            func() <-chan struct{}
	WValue                 func(key any) any
}

func (W _git_golaxy_org_core_service_Context) CallAsync(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallDelegateAsync(entityId uid.Id, fun generic.DelegateVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegateAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallDelegateVoidAsync(entityId uid.Id, fun generic.DelegateVoidVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallDelegateVoidAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallVoidAsync(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoidAsync(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_core_service_Context) Done() <-chan struct{} { return W.WDone() }
func (W _git_golaxy_org_core_service_Context) Err() error            { return W.WErr() }
func (W _git_golaxy_org_core_service_Context) GetAddInManager() extension.AddInManager {
	return W.WGetAddInManager()
}
func (W _git_golaxy_org_core_service_Context) GetAutoRecover() bool       { return W.WGetAutoRecover() }
func (W _git_golaxy_org_core_service_Context) GetEntityLib() pt.EntityLib { return W.WGetEntityLib() }
func (W _git_golaxy_org_core_service_Context) GetEntityManager() service.EntityManager {
	return W.WGetEntityManager()
}
func (W _git_golaxy_org_core_service_Context) GetId() uid.Id { return W.WGetId() }
func (W _git_golaxy_org_core_service_Context) GetInstanceFaceCache() iface.Cache {
	return W.WGetInstanceFaceCache()
}
func (W _git_golaxy_org_core_service_Context) GetName() string { return W.WGetName() }
func (W _git_golaxy_org_core_service_Context) GetParentContext() context.Context {
	return W.WGetParentContext()
}
func (W _git_golaxy_org_core_service_Context) GetReflected() reflect.Value { return W.WGetReflected() }
func (W _git_golaxy_org_core_service_Context) GetReportError() chan error  { return W.WGetReportError() }
func (W _git_golaxy_org_core_service_Context) GetWaitGroup() *sync.WaitGroup {
	return W.WGetWaitGroup()
}
func (W _git_golaxy_org_core_service_Context) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _git_golaxy_org_core_service_Context) Terminate() <-chan struct{}  { return W.WTerminate() }
func (W _git_golaxy_org_core_service_Context) Terminated() <-chan struct{} { return W.WTerminated() }
func (W _git_golaxy_org_core_service_Context) Value(key any) any           { return W.WValue(key) }

// _git_golaxy_org_core_service_EntityManager is an interface wrapper for EntityManager type
type _git_golaxy_org_core_service_EntityManager struct {
	IValue              interface{}
	WAddEntity          func(entity ec.ConcurrentEntity) error
	WGetAndRemoveEntity func(id uid.Id) (ec.ConcurrentEntity, bool)
	WGetContext         func() service.Context
	WGetEntity          func(id uid.Id) (ec.ConcurrentEntity, bool)
	WGetOrAddEntity     func(entity ec.ConcurrentEntity) (ec.ConcurrentEntity, bool, error)
	WRemoveEntity       func(id uid.Id)
}

func (W _git_golaxy_org_core_service_EntityManager) AddEntity(entity ec.ConcurrentEntity) error {
	return W.WAddEntity(entity)
}
func (W _git_golaxy_org_core_service_EntityManager) GetAndRemoveEntity(id uid.Id) (ec.ConcurrentEntity, bool) {
	return W.WGetAndRemoveEntity(id)
}
func (W _git_golaxy_org_core_service_EntityManager) GetContext() service.Context {
	return W.WGetContext()
}
func (W _git_golaxy_org_core_service_EntityManager) GetEntity(id uid.Id) (ec.ConcurrentEntity, bool) {
	return W.WGetEntity(id)
}
func (W _git_golaxy_org_core_service_EntityManager) GetOrAddEntity(entity ec.ConcurrentEntity) (ec.ConcurrentEntity, bool, error) {
	return W.WGetOrAddEntity(entity)
}
func (W _git_golaxy_org_core_service_EntityManager) RemoveEntity(id uid.Id) { W.WRemoveEntity(id) }
