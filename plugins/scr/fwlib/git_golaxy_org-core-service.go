// Code generated by 'yaegi extract git.golaxy.org/core/service'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/ec"
	"git.golaxy.org/core/ec/pt"
	"git.golaxy.org/core/extension"
	"git.golaxy.org/core/service"
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/iface"
	"git.golaxy.org/core/utils/uid"
	"reflect"
	"sync"
	"time"
)

func init() {
	Symbols["git.golaxy.org/core/service/service"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Current":                         reflect.ValueOf(service.Current),
		"ErrContext":                      reflect.ValueOf(&service.ErrContext).Elem(),
		"ErrEntityMgr":                    reflect.ValueOf(&service.ErrEntityMgr).Elem(),
		"NewContext":                      reflect.ValueOf(service.NewContext),
		"RunningState_Birth":              reflect.ValueOf(service.RunningState_Birth),
		"RunningState_PluginActivated":    reflect.ValueOf(service.RunningState_PluginActivated),
		"RunningState_PluginActivating":   reflect.ValueOf(service.RunningState_PluginActivating),
		"RunningState_PluginDeactivated":  reflect.ValueOf(service.RunningState_PluginDeactivated),
		"RunningState_PluginDeactivating": reflect.ValueOf(service.RunningState_PluginDeactivating),
		"RunningState_Started":            reflect.ValueOf(service.RunningState_Started),
		"RunningState_Starting":           reflect.ValueOf(service.RunningState_Starting),
		"RunningState_Terminated":         reflect.ValueOf(service.RunningState_Terminated),
		"RunningState_Terminating":        reflect.ValueOf(service.RunningState_Terminating),
		"UnsafeContext":                   reflect.ValueOf(service.UnsafeContext),
		"UnsafeNewContext":                reflect.ValueOf(service.UnsafeNewContext),
		"With":                            reflect.ValueOf(&service.With).Elem(),

		// type definitions
		"Caller":          reflect.ValueOf((*service.Caller)(nil)),
		"Context":         reflect.ValueOf((*service.Context)(nil)),
		"ContextBehavior": reflect.ValueOf((*service.ContextBehavior)(nil)),
		"ContextOptions":  reflect.ValueOf((*service.ContextOptions)(nil)),
		"EntityMgr":       reflect.ValueOf((*service.EntityMgr)(nil)),
		"RunningHandler":  reflect.ValueOf((*service.RunningHandler)(nil)),
		"RunningState":    reflect.ValueOf((*service.RunningState)(nil)),

		// interface wrapper definitions
		"_Caller":    reflect.ValueOf((*_git_golaxy_org_core_service_Caller)(nil)),
		"_Context":   reflect.ValueOf((*_git_golaxy_org_core_service_Context)(nil)),
		"_EntityMgr": reflect.ValueOf((*_git_golaxy_org_core_service_EntityMgr)(nil)),
	}
}

// _git_golaxy_org_core_service_Caller is an interface wrapper for Caller type
type _git_golaxy_org_core_service_Caller struct {
	IValue            interface{}
	WCall             func(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegate     func(entityId uid.Id, fun generic.DelegateFuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallVoid         func(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet
	WCallVoidDelegate func(entityId uid.Id, fun generic.DelegateActionVar1[ec.Entity, any], args ...any) async.AsyncRet
}

func (W _git_golaxy_org_core_service_Caller) Call(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCall(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallDelegate(entityId uid.Id, fun generic.DelegateFuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegate(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallVoid(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoid(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Caller) CallVoidDelegate(entityId uid.Id, fun generic.DelegateActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoidDelegate(entityId, fun, args...)
}

// _git_golaxy_org_core_service_Context is an interface wrapper for Context type
type _git_golaxy_org_core_service_Context struct {
	IValue                interface{}
	WCall                 func(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallDelegate         func(entityId uid.Id, fun generic.DelegateFuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet
	WCallVoid             func(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet
	WCallVoidDelegate     func(entityId uid.Id, fun generic.DelegateActionVar1[ec.Entity, any], args ...any) async.AsyncRet
	WDeadline             func() (deadline time.Time, ok bool)
	WDone                 func() <-chan struct{}
	WErr                  func() error
	WGetAutoRecover       func() bool
	WGetEntityLib         func() pt.EntityLib
	WGetEntityMgr         func() service.EntityMgr
	WGetId                func() uid.Id
	WGetInstanceFaceCache func() iface.Cache
	WGetName              func() string
	WGetParentContext     func() context.Context
	WGetPluginBundle      func() extension.PluginBundle
	WGetReflected         func() reflect.Value
	WGetReportError       func() chan error
	WGetWaitGroup         func() *sync.WaitGroup
	WString               func() string
	WTerminate            func() <-chan struct{}
	WTerminated           func() <-chan struct{}
	WValue                func(key any) any
}

func (W _git_golaxy_org_core_service_Context) Call(entityId uid.Id, fun generic.FuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCall(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallDelegate(entityId uid.Id, fun generic.DelegateFuncVar1[ec.Entity, any, async.Ret], args ...any) async.AsyncRet {
	return W.WCallDelegate(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallVoid(entityId uid.Id, fun generic.ActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoid(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) CallVoidDelegate(entityId uid.Id, fun generic.DelegateActionVar1[ec.Entity, any], args ...any) async.AsyncRet {
	return W.WCallVoidDelegate(entityId, fun, args...)
}
func (W _git_golaxy_org_core_service_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_core_service_Context) Done() <-chan struct{}      { return W.WDone() }
func (W _git_golaxy_org_core_service_Context) Err() error                 { return W.WErr() }
func (W _git_golaxy_org_core_service_Context) GetAutoRecover() bool       { return W.WGetAutoRecover() }
func (W _git_golaxy_org_core_service_Context) GetEntityLib() pt.EntityLib { return W.WGetEntityLib() }
func (W _git_golaxy_org_core_service_Context) GetEntityMgr() service.EntityMgr {
	return W.WGetEntityMgr()
}
func (W _git_golaxy_org_core_service_Context) GetId() uid.Id { return W.WGetId() }
func (W _git_golaxy_org_core_service_Context) GetInstanceFaceCache() iface.Cache {
	return W.WGetInstanceFaceCache()
}
func (W _git_golaxy_org_core_service_Context) GetName() string { return W.WGetName() }
func (W _git_golaxy_org_core_service_Context) GetParentContext() context.Context {
	return W.WGetParentContext()
}
func (W _git_golaxy_org_core_service_Context) GetPluginBundle() extension.PluginBundle {
	return W.WGetPluginBundle()
}
func (W _git_golaxy_org_core_service_Context) GetReflected() reflect.Value { return W.WGetReflected() }
func (W _git_golaxy_org_core_service_Context) GetReportError() chan error  { return W.WGetReportError() }
func (W _git_golaxy_org_core_service_Context) GetWaitGroup() *sync.WaitGroup {
	return W.WGetWaitGroup()
}
func (W _git_golaxy_org_core_service_Context) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _git_golaxy_org_core_service_Context) Terminate() <-chan struct{}  { return W.WTerminate() }
func (W _git_golaxy_org_core_service_Context) Terminated() <-chan struct{} { return W.WTerminated() }
func (W _git_golaxy_org_core_service_Context) Value(key any) any           { return W.WValue(key) }

// _git_golaxy_org_core_service_EntityMgr is an interface wrapper for EntityMgr type
type _git_golaxy_org_core_service_EntityMgr struct {
	IValue              interface{}
	WAddEntity          func(entity ec.ConcurrentEntity) error
	WGetAndRemoveEntity func(id uid.Id) (ec.ConcurrentEntity, bool)
	WGetContext         func() service.Context
	WGetEntity          func(id uid.Id) (ec.ConcurrentEntity, bool)
	WGetOrAddEntity     func(entity ec.ConcurrentEntity) (ec.ConcurrentEntity, bool, error)
	WRemoveEntity       func(id uid.Id)
}

func (W _git_golaxy_org_core_service_EntityMgr) AddEntity(entity ec.ConcurrentEntity) error {
	return W.WAddEntity(entity)
}
func (W _git_golaxy_org_core_service_EntityMgr) GetAndRemoveEntity(id uid.Id) (ec.ConcurrentEntity, bool) {
	return W.WGetAndRemoveEntity(id)
}
func (W _git_golaxy_org_core_service_EntityMgr) GetContext() service.Context { return W.WGetContext() }
func (W _git_golaxy_org_core_service_EntityMgr) GetEntity(id uid.Id) (ec.ConcurrentEntity, bool) {
	return W.WGetEntity(id)
}
func (W _git_golaxy_org_core_service_EntityMgr) GetOrAddEntity(entity ec.ConcurrentEntity) (ec.ConcurrentEntity, bool, error) {
	return W.WGetOrAddEntity(entity)
}
func (W _git_golaxy_org_core_service_EntityMgr) RemoveEntity(id uid.Id) { W.WRemoveEntity(id) }
