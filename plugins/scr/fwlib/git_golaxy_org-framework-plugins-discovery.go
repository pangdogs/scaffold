// Code generated by 'yaegi extract git.golaxy.org/framework/plugins/discovery'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/utils/uid"
	"git.golaxy.org/framework/plugins/discovery"
	"reflect"
	"time"
)

func init() {
	Symbols["git.golaxy.org/framework/plugins/discovery/discovery"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Create":        reflect.ValueOf(discovery.Create),
		"Delete":        reflect.ValueOf(discovery.Delete),
		"ErrNotFound":   reflect.ValueOf(&discovery.ErrNotFound).Elem(),
		"ErrTerminated": reflect.ValueOf(&discovery.ErrTerminated).Elem(),
		"Name":          reflect.ValueOf(&discovery.Name).Elem(),
		"Update":        reflect.ValueOf(discovery.Update),
		"Using":         reflect.ValueOf(&discovery.Using).Elem(),

		// type definitions
		"Event":     reflect.ValueOf((*discovery.Event)(nil)),
		"EventType": reflect.ValueOf((*discovery.EventType)(nil)),
		"IRegistry": reflect.ValueOf((*discovery.IRegistry)(nil)),
		"IWatcher":  reflect.ValueOf((*discovery.IWatcher)(nil)),
		"Node":      reflect.ValueOf((*discovery.Node)(nil)),
		"Service":   reflect.ValueOf((*discovery.Service)(nil)),

		// interface wrapper definitions
		"_IRegistry": reflect.ValueOf((*_git_golaxy_org_framework_plugins_discovery_IRegistry)(nil)),
		"_IWatcher":  reflect.ValueOf((*_git_golaxy_org_framework_plugins_discovery_IWatcher)(nil)),
	}
}

// _git_golaxy_org_framework_plugins_discovery_IRegistry is an interface wrapper for IRegistry type
type _git_golaxy_org_framework_plugins_discovery_IRegistry struct {
	IValue          interface{}
	WDeregister     func(ctx context.Context, service *discovery.Service) error
	WGetService     func(ctx context.Context, serviceName string) (*discovery.Service, error)
	WGetServiceNode func(ctx context.Context, serviceName string, nodeId uid.Id) (*discovery.Service, error)
	WListServices   func(ctx context.Context) ([]discovery.Service, error)
	WRefreshTTL     func(ctx context.Context) error
	WRegister       func(ctx context.Context, service *discovery.Service, ttl time.Duration) error
	WWatch          func(ctx context.Context, pattern string, revision ...int64) (discovery.IWatcher, error)
}

func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) Deregister(ctx context.Context, service *discovery.Service) error {
	return W.WDeregister(ctx, service)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) GetService(ctx context.Context, serviceName string) (*discovery.Service, error) {
	return W.WGetService(ctx, serviceName)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) GetServiceNode(ctx context.Context, serviceName string, nodeId uid.Id) (*discovery.Service, error) {
	return W.WGetServiceNode(ctx, serviceName, nodeId)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) ListServices(ctx context.Context) ([]discovery.Service, error) {
	return W.WListServices(ctx)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) RefreshTTL(ctx context.Context) error {
	return W.WRefreshTTL(ctx)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) Register(ctx context.Context, service *discovery.Service, ttl time.Duration) error {
	return W.WRegister(ctx, service, ttl)
}
func (W _git_golaxy_org_framework_plugins_discovery_IRegistry) Watch(ctx context.Context, pattern string, revision ...int64) (discovery.IWatcher, error) {
	return W.WWatch(ctx, pattern, revision...)
}

// _git_golaxy_org_framework_plugins_discovery_IWatcher is an interface wrapper for IWatcher type
type _git_golaxy_org_framework_plugins_discovery_IWatcher struct {
	IValue      interface{}
	WNext       func() (*discovery.Event, error)
	WPattern    func() string
	WTerminate  func() <-chan struct{}
	WTerminated func() <-chan struct{}
}

func (W _git_golaxy_org_framework_plugins_discovery_IWatcher) Next() (*discovery.Event, error) {
	return W.WNext()
}
func (W _git_golaxy_org_framework_plugins_discovery_IWatcher) Pattern() string {
	return W.WPattern()
}
func (W _git_golaxy_org_framework_plugins_discovery_IWatcher) Terminate() <-chan struct{} {
	return W.WTerminate()
}
func (W _git_golaxy_org_framework_plugins_discovery_IWatcher) Terminated() <-chan struct{} {
	return W.WTerminated()
}
