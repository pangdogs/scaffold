// Code generated by 'yaegi extract git.golaxy.org/framework/plugins/gate'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/service"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/uid"
	"git.golaxy.org/framework/net/gtp"
	"git.golaxy.org/framework/net/gtp/transport"
	"git.golaxy.org/framework/plugins/gate"
	"git.golaxy.org/framework/utils/binaryutil"
	"net"
	"reflect"
	"time"
)

func init() {
	Symbols["git.golaxy.org/framework/plugins/gate/gate"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CliDetails":             reflect.ValueOf(&gate.CliDetails).Elem(),
		"Install":                reflect.ValueOf(&gate.Install).Elem(),
		"Name":                   reflect.ValueOf(&gate.Name).Elem(),
		"SessionState_Active":    reflect.ValueOf(gate.SessionState_Active),
		"SessionState_Birth":     reflect.ValueOf(gate.SessionState_Birth),
		"SessionState_Confirmed": reflect.ValueOf(gate.SessionState_Confirmed),
		"SessionState_Death":     reflect.ValueOf(gate.SessionState_Death),
		"SessionState_Handshake": reflect.ValueOf(gate.SessionState_Handshake),
		"SessionState_Inactive":  reflect.ValueOf(gate.SessionState_Inactive),
		"Uninstall":              reflect.ValueOf(&gate.Uninstall).Elem(),
		"Using":                  reflect.ValueOf(&gate.Using).Elem(),
		"With":                   reflect.ValueOf(&gate.With).Elem(),

		// type definitions
		"GateOptions":     reflect.ValueOf((*gate.GateOptions)(nil)),
		"IGate":           reflect.ValueOf((*gate.IGate)(nil)),
		"ISession":        reflect.ValueOf((*gate.ISession)(nil)),
		"IWatcher":        reflect.ValueOf((*gate.IWatcher)(nil)),
		"SessionSettings": reflect.ValueOf((*gate.SessionSettings)(nil)),
		"SessionState":    reflect.ValueOf((*gate.SessionState)(nil)),

		// interface wrapper definitions
		"_IGate":    reflect.ValueOf((*_git_golaxy_org_framework_plugins_gate_IGate)(nil)),
		"_ISession": reflect.ValueOf((*_git_golaxy_org_framework_plugins_gate_ISession)(nil)),
		"_IWatcher": reflect.ValueOf((*_git_golaxy_org_framework_plugins_gate_IWatcher)(nil)),
	}
}

// _git_golaxy_org_framework_plugins_gate_IGate is an interface wrapper for IGate type
type _git_golaxy_org_framework_plugins_gate_IGate struct {
	IValue         interface{}
	WCountSessions func() int
	WEachSessions  func(fun generic.Action1[gate.ISession])
	WGetSession    func(sessionId uid.Id) (gate.ISession, bool)
	WRangeSessions func(fun generic.Func1[gate.ISession, bool])
	WWatch         func(ctx context.Context, handler generic.DelegateAction3[gate.ISession, gate.SessionState, gate.SessionState]) gate.IWatcher
}

func (W _git_golaxy_org_framework_plugins_gate_IGate) CountSessions() int {
	return W.WCountSessions()
}
func (W _git_golaxy_org_framework_plugins_gate_IGate) EachSessions(fun generic.Action1[gate.ISession]) {
	W.WEachSessions(fun)
}
func (W _git_golaxy_org_framework_plugins_gate_IGate) GetSession(sessionId uid.Id) (gate.ISession, bool) {
	return W.WGetSession(sessionId)
}
func (W _git_golaxy_org_framework_plugins_gate_IGate) RangeSessions(fun generic.Func1[gate.ISession, bool]) {
	W.WRangeSessions(fun)
}
func (W _git_golaxy_org_framework_plugins_gate_IGate) Watch(ctx context.Context, handler generic.DelegateAction3[gate.ISession, gate.SessionState, gate.SessionState]) gate.IWatcher {
	return W.WWatch(ctx, handler)
}

// _git_golaxy_org_framework_plugins_gate_ISession is an interface wrapper for ISession type
type _git_golaxy_org_framework_plugins_gate_ISession struct {
	IValue         interface{}
	WClose         func(err error) <-chan struct{}
	WClosed        func() <-chan struct{}
	WDeadline      func() (deadline time.Time, ok bool)
	WDone          func() <-chan struct{}
	WErr           func() error
	WGetContext    func() service.Context
	WGetId         func() uid.Id
	WGetLocalAddr  func() net.Addr
	WGetRemoteAddr func() net.Addr
	WGetSettings   func() gate.SessionSettings
	WGetState      func() gate.SessionState
	WGetToken      func() string
	WGetUserId     func() string
	WRecvDataChan  func() <-chan binaryutil.RecycleBytes
	WRecvEventChan func() <-chan transport.Event[gtp.MsgReader]
	WSendData      func(data []byte) error
	WSendDataChan  func() chan<- binaryutil.RecycleBytes
	WSendEvent     func(event transport.Event[gtp.MsgReader]) error
	WSendEventChan func() chan<- transport.Event[gtp.MsgReader]
	WString        func() string
	WValue         func(key any) any
	WWatchData     func(ctx context.Context, handler generic.DelegateFunc2[gate.ISession, []byte, error]) gate.IWatcher
	WWatchEvent    func(ctx context.Context, handler generic.DelegateFunc2[gate.ISession, transport.Event[gtp.MsgReader], error]) gate.IWatcher
}

func (W _git_golaxy_org_framework_plugins_gate_ISession) Close(err error) <-chan struct{} {
	return W.WClose(err)
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) Closed() <-chan struct{} {
	return W.WClosed()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) Done() <-chan struct{} {
	return W.WDone()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) Err() error {
	return W.WErr()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetContext() service.Context {
	return W.WGetContext()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetId() uid.Id {
	return W.WGetId()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetLocalAddr() net.Addr {
	return W.WGetLocalAddr()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetRemoteAddr() net.Addr {
	return W.WGetRemoteAddr()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetSettings() gate.SessionSettings {
	return W.WGetSettings()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetState() gate.SessionState {
	return W.WGetState()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetToken() string {
	return W.WGetToken()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) GetUserId() string {
	return W.WGetUserId()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) RecvDataChan() <-chan binaryutil.RecycleBytes {
	return W.WRecvDataChan()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) RecvEventChan() <-chan transport.Event[gtp.MsgReader] {
	return W.WRecvEventChan()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) SendData(data []byte) error {
	return W.WSendData(data)
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) SendDataChan() chan<- binaryutil.RecycleBytes {
	return W.WSendDataChan()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) SendEvent(event transport.Event[gtp.MsgReader]) error {
	return W.WSendEvent(event)
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) SendEventChan() chan<- transport.Event[gtp.MsgReader] {
	return W.WSendEventChan()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) Value(key any) any {
	return W.WValue(key)
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) WatchData(ctx context.Context, handler generic.DelegateFunc2[gate.ISession, []byte, error]) gate.IWatcher {
	return W.WWatchData(ctx, handler)
}
func (W _git_golaxy_org_framework_plugins_gate_ISession) WatchEvent(ctx context.Context, handler generic.DelegateFunc2[gate.ISession, transport.Event[gtp.MsgReader], error]) gate.IWatcher {
	return W.WWatchEvent(ctx, handler)
}

// _git_golaxy_org_framework_plugins_gate_IWatcher is an interface wrapper for IWatcher type
type _git_golaxy_org_framework_plugins_gate_IWatcher struct {
	IValue      interface{}
	WDeadline   func() (deadline time.Time, ok bool)
	WDone       func() <-chan struct{}
	WErr        func() error
	WTerminate  func() <-chan struct{}
	WTerminated func() <-chan struct{}
	WValue      func(key any) any
}

func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Done() <-chan struct{} {
	return W.WDone()
}
func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Err() error {
	return W.WErr()
}
func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Terminate() <-chan struct{} {
	return W.WTerminate()
}
func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Terminated() <-chan struct{} {
	return W.WTerminated()
}
func (W _git_golaxy_org_framework_plugins_gate_IWatcher) Value(key any) any {
	return W.WValue(key)
}
