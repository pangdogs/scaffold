// Code generated by 'yaegi extract git.golaxy.org/framework/net/gap/variant'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/framework/net/gap/variant"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["git.golaxy.org/framework/net/gap/variant/variant"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CastReadonlyVariant":   reflect.ValueOf(variant.CastReadonlyVariant),
		"CastSerializedVariant": reflect.ValueOf(variant.CastSerializedVariant),
		"ErrInvalidCast":        reflect.ValueOf(&variant.ErrInvalidCast).Elem(),
		"ErrNotDeclared":        reflect.ValueOf(&variant.ErrNotDeclared).Elem(),
		"ErrVariant":            reflect.ValueOf(&variant.ErrVariant).Elem(),
		"Errorf":                reflect.ValueOf(variant.Errorf),
		"Errorln":               reflect.ValueOf(variant.Errorln),
		"MakeError":             reflect.ValueOf(variant.MakeError),
		"MakeReadonlyVariant":   reflect.ValueOf(variant.MakeReadonlyVariant),
		"MakeSerializedValue":   reflect.ValueOf(variant.MakeSerializedValue),
		"MakeSerializedVariant": reflect.ValueOf(variant.MakeSerializedVariant),
		"MakeTypeId":            reflect.ValueOf(variant.MakeTypeId),
		"TypeId_Array":          reflect.ValueOf(variant.TypeId_Array),
		"TypeId_Bool":           reflect.ValueOf(variant.TypeId_Bool),
		"TypeId_Byte":           reflect.ValueOf(variant.TypeId_Byte),
		"TypeId_Bytes":          reflect.ValueOf(variant.TypeId_Bytes),
		"TypeId_CallChain":      reflect.ValueOf(variant.TypeId_CallChain),
		"TypeId_Customize":      reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"TypeId_Double":         reflect.ValueOf(variant.TypeId_Double),
		"TypeId_Error":          reflect.ValueOf(variant.TypeId_Error),
		"TypeId_Float":          reflect.ValueOf(variant.TypeId_Float),
		"TypeId_Int":            reflect.ValueOf(variant.TypeId_Int),
		"TypeId_Int16":          reflect.ValueOf(variant.TypeId_Int16),
		"TypeId_Int32":          reflect.ValueOf(variant.TypeId_Int32),
		"TypeId_Int64":          reflect.ValueOf(variant.TypeId_Int64),
		"TypeId_Int8":           reflect.ValueOf(variant.TypeId_Int8),
		"TypeId_Map":            reflect.ValueOf(variant.TypeId_Map),
		"TypeId_None":           reflect.ValueOf(variant.TypeId_None),
		"TypeId_Null":           reflect.ValueOf(variant.TypeId_Null),
		"TypeId_String":         reflect.ValueOf(variant.TypeId_String),
		"TypeId_Uint":           reflect.ValueOf(variant.TypeId_Uint),
		"TypeId_Uint16":         reflect.ValueOf(variant.TypeId_Uint16),
		"TypeId_Uint32":         reflect.ValueOf(variant.TypeId_Uint32),
		"TypeId_Uint64":         reflect.ValueOf(variant.TypeId_Uint64),
		"TypeId_Uint8":          reflect.ValueOf(variant.TypeId_Uint8),
		"VariantCreator":        reflect.ValueOf(variant.VariantCreator),

		// type definitions
		"Array":           reflect.ValueOf((*variant.Array)(nil)),
		"Bool":            reflect.ValueOf((*variant.Bool)(nil)),
		"Byte":            reflect.ValueOf((*variant.Byte)(nil)),
		"Bytes":           reflect.ValueOf((*variant.Bytes)(nil)),
		"Call":            reflect.ValueOf((*variant.Call)(nil)),
		"CallChain":       reflect.ValueOf((*variant.CallChain)(nil)),
		"Double":          reflect.ValueOf((*variant.Double)(nil)),
		"Error":           reflect.ValueOf((*variant.Error)(nil)),
		"Float":           reflect.ValueOf((*variant.Float)(nil)),
		"IVariantCreator": reflect.ValueOf((*variant.IVariantCreator)(nil)),
		"Int":             reflect.ValueOf((*variant.Int)(nil)),
		"Int16":           reflect.ValueOf((*variant.Int16)(nil)),
		"Int32":           reflect.ValueOf((*variant.Int32)(nil)),
		"Int64":           reflect.ValueOf((*variant.Int64)(nil)),
		"Int8":            reflect.ValueOf((*variant.Int8)(nil)),
		"Map":             reflect.ValueOf((*variant.Map)(nil)),
		"Null":            reflect.ValueOf((*variant.Null)(nil)),
		"SerializedValue": reflect.ValueOf((*variant.SerializedValue)(nil)),
		"String":          reflect.ValueOf((*variant.String)(nil)),
		"TypeId":          reflect.ValueOf((*variant.TypeId)(nil)),
		"Uint":            reflect.ValueOf((*variant.Uint)(nil)),
		"Uint16":          reflect.ValueOf((*variant.Uint16)(nil)),
		"Uint32":          reflect.ValueOf((*variant.Uint32)(nil)),
		"Uint64":          reflect.ValueOf((*variant.Uint64)(nil)),
		"Uint8":           reflect.ValueOf((*variant.Uint8)(nil)),
		"Value":           reflect.ValueOf((*variant.Value)(nil)),
		"ValueReader":     reflect.ValueOf((*variant.ValueReader)(nil)),
		"ValueWriter":     reflect.ValueOf((*variant.ValueWriter)(nil)),
		"Variant":         reflect.ValueOf((*variant.Variant)(nil)),

		// interface wrapper definitions
		"_IVariantCreator": reflect.ValueOf((*_git_golaxy_org_framework_net_gap_variant_IVariantCreator)(nil)),
		"_Value":           reflect.ValueOf((*_git_golaxy_org_framework_net_gap_variant_Value)(nil)),
		"_ValueReader":     reflect.ValueOf((*_git_golaxy_org_framework_net_gap_variant_ValueReader)(nil)),
		"_ValueWriter":     reflect.ValueOf((*_git_golaxy_org_framework_net_gap_variant_ValueWriter)(nil)),
	}
}

// _git_golaxy_org_framework_net_gap_variant_IVariantCreator is an interface wrapper for IVariantCreator type
type _git_golaxy_org_framework_net_gap_variant_IVariantCreator struct {
	IValue        interface{}
	WDeclare      func(v variant.Value)
	WNew          func(typeId variant.TypeId) (variant.Value, error)
	WNewReflected func(typeId variant.TypeId) (reflect.Value, error)
	WUndeclare    func(typeId variant.TypeId)
}

func (W _git_golaxy_org_framework_net_gap_variant_IVariantCreator) Declare(v variant.Value) {
	W.WDeclare(v)
}
func (W _git_golaxy_org_framework_net_gap_variant_IVariantCreator) New(typeId variant.TypeId) (variant.Value, error) {
	return W.WNew(typeId)
}
func (W _git_golaxy_org_framework_net_gap_variant_IVariantCreator) NewReflected(typeId variant.TypeId) (reflect.Value, error) {
	return W.WNewReflected(typeId)
}
func (W _git_golaxy_org_framework_net_gap_variant_IVariantCreator) Undeclare(typeId variant.TypeId) {
	W.WUndeclare(typeId)
}

// _git_golaxy_org_framework_net_gap_variant_Value is an interface wrapper for Value type
type _git_golaxy_org_framework_net_gap_variant_Value struct {
	IValue    interface{}
	WIndirect func() any
	WRead     func(p []byte) (n int, err error)
	WSize     func() int
	WTypeId   func() variant.TypeId
	WWrite    func(p []byte) (n int, err error)
}

func (W _git_golaxy_org_framework_net_gap_variant_Value) Indirect() any {
	return W.WIndirect()
}
func (W _git_golaxy_org_framework_net_gap_variant_Value) Read(p []byte) (n int, err error) {
	return W.WRead(p)
}
func (W _git_golaxy_org_framework_net_gap_variant_Value) Size() int {
	return W.WSize()
}
func (W _git_golaxy_org_framework_net_gap_variant_Value) TypeId() variant.TypeId {
	return W.WTypeId()
}
func (W _git_golaxy_org_framework_net_gap_variant_Value) Write(p []byte) (n int, err error) {
	return W.WWrite(p)
}

// _git_golaxy_org_framework_net_gap_variant_ValueReader is an interface wrapper for ValueReader type
type _git_golaxy_org_framework_net_gap_variant_ValueReader struct {
	IValue    interface{}
	WIndirect func() any
	WRead     func(p []byte) (n int, err error)
	WSize     func() int
	WTypeId   func() variant.TypeId
}

func (W _git_golaxy_org_framework_net_gap_variant_ValueReader) Indirect() any {
	return W.WIndirect()
}
func (W _git_golaxy_org_framework_net_gap_variant_ValueReader) Read(p []byte) (n int, err error) {
	return W.WRead(p)
}
func (W _git_golaxy_org_framework_net_gap_variant_ValueReader) Size() int {
	return W.WSize()
}
func (W _git_golaxy_org_framework_net_gap_variant_ValueReader) TypeId() variant.TypeId {
	return W.WTypeId()
}

// _git_golaxy_org_framework_net_gap_variant_ValueWriter is an interface wrapper for ValueWriter type
type _git_golaxy_org_framework_net_gap_variant_ValueWriter struct {
	IValue  interface{}
	WSize   func() int
	WTypeId func() variant.TypeId
	WWrite  func(p []byte) (n int, err error)
}

func (W _git_golaxy_org_framework_net_gap_variant_ValueWriter) Size() int {
	return W.WSize()
}
func (W _git_golaxy_org_framework_net_gap_variant_ValueWriter) TypeId() variant.TypeId {
	return W.WTypeId()
}
func (W _git_golaxy_org_framework_net_gap_variant_ValueWriter) Write(p []byte) (n int, err error) {
	return W.WWrite(p)
}
