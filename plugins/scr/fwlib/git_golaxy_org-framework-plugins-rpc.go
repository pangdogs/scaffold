// Code generated by 'yaegi extract git.golaxy.org/framework/plugins/rpc'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/core/utils/async"
	"git.golaxy.org/framework/net/gap/variant"
	"git.golaxy.org/framework/plugins/rpc"
	"git.golaxy.org/framework/plugins/rpc/callpath"
	"reflect"
)

func init() {
	Symbols["git.golaxy.org/framework/plugins/rpc/rpc"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AssertVoid":                   reflect.ValueOf(rpc.AssertVoid),
		"Asserts":                      reflect.ValueOf(rpc.Asserts),
		"ErrMethodResultCountMismatch": reflect.ValueOf(&rpc.ErrMethodResultCountMismatch).Elem(),
		"ErrMethodResultTypeMismatch":  reflect.ValueOf(&rpc.ErrMethodResultTypeMismatch).Elem(),
		"Install":                      reflect.ValueOf(&rpc.Install).Elem(),
		"Name":                         reflect.ValueOf(&rpc.Name).Elem(),
		"ResultVoid":                   reflect.ValueOf(rpc.ResultVoid),
		"Results":                      reflect.ValueOf(rpc.Results),
		"Uninstall":                    reflect.ValueOf(&rpc.Uninstall).Elem(),
		"Using":                        reflect.ValueOf(&rpc.Using).Elem(),
		"With":                         reflect.ValueOf(&rpc.With).Elem(),

		// type definitions
		"IRPC":         reflect.ValueOf((*rpc.IRPC)(nil)),
		"RPCOptions":   reflect.ValueOf((*rpc.RPCOptions)(nil)),
		"ResultTuple0": reflect.ValueOf((*rpc.ResultTuple0)(nil)),
		"ResultValues": reflect.ValueOf((*rpc.ResultValues)(nil)),

		// interface wrapper definitions
		"_IRPC": reflect.ValueOf((*_git_golaxy_org_framework_plugins_rpc_IRPC)(nil)),
	}
}

// _git_golaxy_org_framework_plugins_rpc_IRPC is an interface wrapper for IRPC type
type _git_golaxy_org_framework_plugins_rpc_IRPC struct {
	IValue     interface{}
	WOnewayRPC func(dst string, cc variant.CallChain, cp callpath.CallPath, args ...any) error
	WRPC       func(dst string, cc variant.CallChain, cp callpath.CallPath, args ...any) async.AsyncRetT[any]
}

func (W _git_golaxy_org_framework_plugins_rpc_IRPC) OnewayRPC(dst string, cc variant.CallChain, cp callpath.CallPath, args ...any) error {
	return W.WOnewayRPC(dst, cc, cp, args...)
}
func (W _git_golaxy_org_framework_plugins_rpc_IRPC) RPC(dst string, cc variant.CallChain, cp callpath.CallPath, args ...any) async.AsyncRetT[any] {
	return W.WRPC(dst, cc, cp, args...)
}
