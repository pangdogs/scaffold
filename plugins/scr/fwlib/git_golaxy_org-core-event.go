// Code generated by 'yaegi extract git.golaxy.org/core/event'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/core/event"
	"reflect"
)

func init() {
	Symbols["git.golaxy.org/core/event/event"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Clean":                   reflect.ValueOf(event.Clean),
		"DeclareEventId":          reflect.ValueOf(event.DeclareEventId),
		"DeclareEventTabId":       reflect.ValueOf(event.DeclareEventTabId),
		"ErrArgs":                 reflect.ValueOf(&event.ErrArgs).Elem(),
		"ErrEvent":                reflect.ValueOf(&event.ErrEvent).Elem(),
		"EventRecursionLimit":     reflect.ValueOf(&event.EventRecursionLimit).Elem(),
		"EventRecursion_Allow":    reflect.ValueOf(event.EventRecursion_Allow),
		"EventRecursion_Deepest":  reflect.ValueOf(event.EventRecursion_Deepest),
		"EventRecursion_Disallow": reflect.ValueOf(event.EventRecursion_Disallow),
		"EventRecursion_Discard":  reflect.ValueOf(event.EventRecursion_Discard),
		"EventRecursion_Truncate": reflect.ValueOf(event.EventRecursion_Truncate),
		"MakeEventId":             reflect.ValueOf(event.MakeEventId),
		"MakeEventTabId":          reflect.ValueOf(event.MakeEventTabId),
		"Panicf":                  reflect.ValueOf(event.Panicf),
		"Unbind":                  reflect.ValueOf(event.Unbind),
		"UnsafeEvent":             reflect.ValueOf(event.UnsafeEvent),

		// type definitions
		"Cache":           reflect.ValueOf((*event.Cache)(nil)),
		"CombineEventTab": reflect.ValueOf((*event.CombineEventTab)(nil)),
		"Event":           reflect.ValueOf((*event.Event)(nil)),
		"EventRecursion":  reflect.ValueOf((*event.EventRecursion)(nil)),
		"Hook":            reflect.ValueOf((*event.Hook)(nil)),
		"IEvent":          reflect.ValueOf((*event.IEvent)(nil)),
		"IEventCtrl":      reflect.ValueOf((*event.IEventCtrl)(nil)),
		"IEventTab":       reflect.ValueOf((*event.IEventTab)(nil)),

		// interface wrapper definitions
		"_IEvent":     reflect.ValueOf((*_git_golaxy_org_core_event_IEvent)(nil)),
		"_IEventCtrl": reflect.ValueOf((*_git_golaxy_org_core_event_IEventCtrl)(nil)),
		"_IEventTab":  reflect.ValueOf((*_git_golaxy_org_core_event_IEventTab)(nil)),
	}
}

// _git_golaxy_org_core_event_IEvent is an interface wrapper for IEvent type
type _git_golaxy_org_core_event_IEvent struct {
	IValue interface{}
}

// _git_golaxy_org_core_event_IEventCtrl is an interface wrapper for IEventCtrl type
type _git_golaxy_org_core_event_IEventCtrl struct {
	IValue interface{}
	WClean func()
	WClose func()
	WInit  func(autoRecover bool, reportError chan error, recursion event.EventRecursion)
	WOpen  func()
}

func (W _git_golaxy_org_core_event_IEventCtrl) Clean() {
	W.WClean()
}
func (W _git_golaxy_org_core_event_IEventCtrl) Close() {
	W.WClose()
}
func (W _git_golaxy_org_core_event_IEventCtrl) Init(autoRecover bool, reportError chan error, recursion event.EventRecursion) {
	W.WInit(autoRecover, reportError, recursion)
}
func (W _git_golaxy_org_core_event_IEventCtrl) Open() {
	W.WOpen()
}

// _git_golaxy_org_core_event_IEventTab is an interface wrapper for IEventTab type
type _git_golaxy_org_core_event_IEventTab struct {
	IValue interface{}
	WCtrl  func() event.IEventCtrl
	WEvent func(id uint64) event.IEvent
}

func (W _git_golaxy_org_core_event_IEventTab) Ctrl() event.IEventCtrl {
	return W.WCtrl()
}
func (W _git_golaxy_org_core_event_IEventTab) Event(id uint64) event.IEvent {
	return W.WEvent(id)
}
