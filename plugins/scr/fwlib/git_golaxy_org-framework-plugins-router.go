// Code generated by 'yaegi extract git.golaxy.org/framework/plugins/router'. DO NOT EDIT.

package fwlib

import (
	"context"
	"git.golaxy.org/core/ec"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/uid"
	"git.golaxy.org/framework/net/gtp"
	"git.golaxy.org/framework/net/gtp/transport"
	"git.golaxy.org/framework/plugins/gate"
	"git.golaxy.org/framework/plugins/router"
	"git.golaxy.org/framework/utils/binaryutil"
	"reflect"
	"time"
)

func init() {
	Symbols["git.golaxy.org/framework/plugins/router/router"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrEntityMapped":    reflect.ValueOf(&router.ErrEntityMapped).Elem(),
		"ErrEntityNotFound":  reflect.ValueOf(&router.ErrEntityNotFound).Elem(),
		"ErrSessionMapped":   reflect.ValueOf(&router.ErrSessionMapped).Elem(),
		"ErrSessionNotFound": reflect.ValueOf(&router.ErrSessionNotFound).Elem(),
		"Install":            reflect.ValueOf(&router.Install).Elem(),
		"Name":               reflect.ValueOf(&router.Name).Elem(),
		"Uninstall":          reflect.ValueOf(&router.Uninstall).Elem(),
		"Using":              reflect.ValueOf(&router.Using).Elem(),
		"With":               reflect.ValueOf(&router.With).Elem(),

		// type definitions
		"IGroup":        reflect.ValueOf((*router.IGroup)(nil)),
		"IMapping":      reflect.ValueOf((*router.IMapping)(nil)),
		"IRouter":       reflect.ValueOf((*router.IRouter)(nil)),
		"RouterOptions": reflect.ValueOf((*router.RouterOptions)(nil)),

		// interface wrapper definitions
		"_IGroup":   reflect.ValueOf((*_git_golaxy_org_framework_plugins_router_IGroup)(nil)),
		"_IMapping": reflect.ValueOf((*_git_golaxy_org_framework_plugins_router_IMapping)(nil)),
		"_IRouter":  reflect.ValueOf((*_git_golaxy_org_framework_plugins_router_IRouter)(nil)),
	}
}

// _git_golaxy_org_framework_plugins_router_IGroup is an interface wrapper for IGroup type
type _git_golaxy_org_framework_plugins_router_IGroup struct {
	IValue         interface{}
	WAdd           func(ctx context.Context, entIds ...uid.Id) error
	WCount         func() int
	WDeadline      func() (deadline time.Time, ok bool)
	WDone          func() <-chan struct{}
	WEach          func(fun generic.Action1[uid.Id])
	WErr           func() error
	WGetAddr       func() string
	WGetName       func() string
	WRange         func(fun generic.Func1[uid.Id, bool])
	WRefreshTTL    func(ctx context.Context) error
	WRemove        func(ctx context.Context, entIds ...uid.Id) error
	WSendData      func(data []byte)
	WSendDataChan  func() chan<- binaryutil.RecycleBytes
	WSendEvent     func(event transport.Event[gtp.MsgReader])
	WSendEventChan func() chan<- transport.Event[gtp.MsgReader]
	WValue         func(key any) any
}

func (W _git_golaxy_org_framework_plugins_router_IGroup) Add(ctx context.Context, entIds ...uid.Id) error {
	return W.WAdd(ctx, entIds...)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Count() int {
	return W.WCount()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Done() <-chan struct{} {
	return W.WDone()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Each(fun generic.Action1[uid.Id]) {
	W.WEach(fun)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Err() error {
	return W.WErr()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) GetAddr() string {
	return W.WGetAddr()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) GetName() string {
	return W.WGetName()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Range(fun generic.Func1[uid.Id, bool]) {
	W.WRange(fun)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) RefreshTTL(ctx context.Context) error {
	return W.WRefreshTTL(ctx)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Remove(ctx context.Context, entIds ...uid.Id) error {
	return W.WRemove(ctx, entIds...)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) SendData(data []byte) {
	W.WSendData(data)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) SendDataChan() chan<- binaryutil.RecycleBytes {
	return W.WSendDataChan()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) SendEvent(event transport.Event[gtp.MsgReader]) {
	W.WSendEvent(event)
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) SendEventChan() chan<- transport.Event[gtp.MsgReader] {
	return W.WSendEventChan()
}
func (W _git_golaxy_org_framework_plugins_router_IGroup) Value(key any) any {
	return W.WValue(key)
}

// _git_golaxy_org_framework_plugins_router_IMapping is an interface wrapper for IMapping type
type _git_golaxy_org_framework_plugins_router_IMapping struct {
	IValue      interface{}
	WDeadline   func() (deadline time.Time, ok bool)
	WDone       func() <-chan struct{}
	WErr        func() error
	WGetCliAddr func() string
	WGetEntity  func() ec.ConcurrentEntity
	WGetSession func() gate.ISession
	WValue      func(key any) any
}

func (W _git_golaxy_org_framework_plugins_router_IMapping) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) Done() <-chan struct{} {
	return W.WDone()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) Err() error {
	return W.WErr()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) GetCliAddr() string {
	return W.WGetCliAddr()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) GetEntity() ec.ConcurrentEntity {
	return W.WGetEntity()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) GetSession() gate.ISession {
	return W.WGetSession()
}
func (W _git_golaxy_org_framework_plugins_router_IMapping) Value(key any) any {
	return W.WValue(key)
}

// _git_golaxy_org_framework_plugins_router_IRouter is an interface wrapper for IRouter type
type _git_golaxy_org_framework_plugins_router_IRouter struct {
	IValue          interface{}
	WAddGroup       func(ctx context.Context, name string) (router.IGroup, error)
	WCleanEntity    func(entityId uid.Id)
	WCleanSession   func(sessionId uid.Id)
	WDeleteGroup    func(ctx context.Context, name string)
	WEachGroups     func(ctx context.Context, entityId uid.Id, fun generic.Action1[router.IGroup])
	WGetGroup       func(ctx context.Context, name string) (router.IGroup, bool)
	WGetGroupByAddr func(ctx context.Context, addr string) (router.IGroup, bool)
	WLookupEntity   func(sessionId uid.Id) (ec.ConcurrentEntity, string, bool)
	WLookupSession  func(entityId uid.Id) (gate.ISession, bool)
	WMapping        func(entityId uid.Id, sessionId uid.Id) (router.IMapping, error)
	WRangeGroups    func(ctx context.Context, entityId uid.Id, fun generic.Func1[router.IGroup, bool])
}

func (W _git_golaxy_org_framework_plugins_router_IRouter) AddGroup(ctx context.Context, name string) (router.IGroup, error) {
	return W.WAddGroup(ctx, name)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) CleanEntity(entityId uid.Id) {
	W.WCleanEntity(entityId)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) CleanSession(sessionId uid.Id) {
	W.WCleanSession(sessionId)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) DeleteGroup(ctx context.Context, name string) {
	W.WDeleteGroup(ctx, name)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) EachGroups(ctx context.Context, entityId uid.Id, fun generic.Action1[router.IGroup]) {
	W.WEachGroups(ctx, entityId, fun)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) GetGroup(ctx context.Context, name string) (router.IGroup, bool) {
	return W.WGetGroup(ctx, name)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) GetGroupByAddr(ctx context.Context, addr string) (router.IGroup, bool) {
	return W.WGetGroupByAddr(ctx, addr)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) LookupEntity(sessionId uid.Id) (ec.ConcurrentEntity, string, bool) {
	return W.WLookupEntity(sessionId)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) LookupSession(entityId uid.Id) (gate.ISession, bool) {
	return W.WLookupSession(entityId)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) Mapping(entityId uid.Id, sessionId uid.Id) (router.IMapping, error) {
	return W.WMapping(entityId, sessionId)
}
func (W _git_golaxy_org_framework_plugins_router_IRouter) RangeGroups(ctx context.Context, entityId uid.Id, fun generic.Func1[router.IGroup, bool]) {
	W.WRangeGroups(ctx, entityId, fun)
}
